{"version":3,"sources":["services/contacts.js","components/Contact.js","components/CatalogueDisplay.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","contacts","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","concat","console","log","remove","delete","Contact","_ref","removeContact","react_default","a","createElement","className","name","number","onClick","CatalogueDisplay","catalogue","filterString","rows","filter","el","toLowerCase","includes","map","components_Contact","key","Notification","message","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","displayNotification","msg","setState","actionNotification","setTimeout","addContact","event","preventDefault","existingContact","state","find","newName","updateContact","newPerson","newNumber","contactService","contact","newCatalogue","catch","error","window","confirm","alteredContact","objectSpread","updatedContact","c","indexOfRemovalCandidate","findIndex","updatedContacts","toConsumableArray","removalCandidate","splice","res","handleInputChange","_event$target","target","value","defineProperty","_this2","components_Notification","onChange","type","components_CatalogueDisplay","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f942080b.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\nconst getAll = () => {\r\n\tconst request = axios.get(baseUrl)\r\n\treturn request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n\tconst request = axios.post(baseUrl, newObject)\r\n\treturn request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n\tconst request = axios.put(`${baseUrl}/${id}`, newObject)\r\n\treturn request.then(response => {\r\n\t\tconsole.log(response.data)\r\n\t\treturn response.data\r\n\t})\r\n}\r\n\r\nconst remove = (id) => {\r\n\tconst request = axios.delete(`${baseUrl}/${id}`)\r\n\treturn request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, remove }","import React from 'react'\r\n\r\nconst Contact = ({ data, removeContact }) => {\r\n\treturn (\r\n\t\t<tr className='contact'>\r\n\t\t\t<td>{data.name}</td>\r\n\t\t\t<td>{data.number}</td>\r\n\t\t\t<td>\r\n\t\t\t\t<button\r\n\t\t\t\t\tonClick={removeContact(data.id)}>poista</button>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t)\r\n}\r\n\r\nexport default Contact","import React from 'react'\r\nimport Contact from '../components/Contact'\r\n\r\nconst CatalogueDisplay = ({ catalogue, filterString, removeContact }) => {\r\n  const catalogueData =\r\n    !filterString ?\r\n      catalogue :\r\n      catalogue.filter(el => {\r\n        return el.name.toLowerCase().includes(filterString.toLowerCase())\r\n      })\r\n\r\n  const rows = catalogueData.map(el => {\r\n    return <Contact\r\n              key={el.id}\r\n\t\t\t\t\t\t\tdata={el}\r\n\t\t\t\t\t\t\tremoveContact={removeContact} />\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <h3>Yhteystiedot</h3>\r\n      <table className='contacts-display'>\r\n        <tbody>\r\n          {rows}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CatalogueDisplay","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='notification'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React from 'react'\nimport contactService from './services/contacts'\nimport CatalogueDisplay from './components/CatalogueDisplay'\nimport Notification from './components/Notification'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      contacts: [],\n      newName: '',\n      newNumber: '',\n      filterString: '',\n      actionNotification: null\n    }\n  }\n\n  componentDidMount() {\n    contactService.getAll()\n      .then(contacts => {\n        this.setState({ contacts: contacts })\n      })\n  }\n\n  displayNotification = ({msg, name}) => {\n    if (name) {\n      this.setState({ actionNotification: `${msg}${name}`});\n    } else {\n      this.setState({ actionNotification: msg});\n    }\n\n    setTimeout(() => {\n        this.setState({ actionNotification: null})\n    }, 5000)\n  }\n\n  addContact = (event) => {\n    event.preventDefault()\n    const existingContact = this.state.contacts.find(el => el.name === this.state.newName)\n    if (!existingContact) {\n      const newPerson = { \n        name: this.state.newName,\n        number: this.state.newNumber\n      }\n      contactService.create(newPerson)\n        .then(contact => {\n          const newCatalogue = this.state.contacts.concat(contact)\n          this.setState({ contacts: newCatalogue })\n          this.displayNotification({ msg: 'LisÃ¤ttiin yhteystieto: ', name: contact.name })\n        })\n        .catch((error) => {\n          console.log(error)\n          this.displayNotification({ msg: 'Pakollisia tietoja puuttuu'})\n        })\n    } else {\n      this.updateContact(existingContact)\n    }\n  }\n\n  updateContact = (contact) => {\n    if (window.confirm(`${contact.name} on jo luettelossa, korvataanko vanha numero uudella?`)) {\n      const alteredContact = { ...contact, number: this.state.newNumber }\n      contactService.update(contact.id, alteredContact)\n        .then(updatedContact => {\n          const contacts = this.state.contacts.filter(c => c.id !== updatedContact.id)\n          this.setState({ contacts: contacts.concat(updatedContact) });\n          this.displayNotification({ msg: 'PÃ¤ivitettiin yhteystieto: ', name: updatedContact.name })\n        })\n        .catch(error => {\n          console.log(error)\n          this.setState({ contacts: this.state.contacts.filter(c => c.id !== contact.id) })\n          this.displayNotification({ msg: 'Yhteystieto jota yritit muuttaa on poistettu palvelimelta.', name: null })\n        })\n    }\n  }\n\n  removeContact = (id) => {\n    return () => {\n      const indexOfRemovalCandidate = this.state.contacts.findIndex(el => el.id === id)\n      const updatedContacts = [...this.state.contacts]\n      const removalCandidate = updatedContacts.splice(indexOfRemovalCandidate, 1)[0]\n\n      if (window.confirm(`Poistetaanko ${removalCandidate.name}?`)) {\n        contactService.remove(id)\n          .then((res) => {\n            console.log(res)\n            this.setState({ contacts: updatedContacts })\n            this.displayNotification({ msg: 'Poistettiin yhteystieto: ', name: removalCandidate.name })\n          })\n      }\n    }\n  }\n\n  handleInputChange = (event) => {\n    const { name, value } = event.target\n    this.setState({ [name]: value })\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Puhelinluettelo</h2>\n        <Notification\n          message={this.state.actionNotification} />\n        <div>\n          rajaa nÃ¤ytettÃ¤viÃ¤\n          <input\n            name='filterString'\n            value={this.state.filterString}\n            onChange={this.handleInputChange} />\n        </div>\n        <h3>LisÃ¤Ã¤ uusi</h3>\n        <form>\n          <div>\n            Nimi:\n            <input\n              name='newName'\n              value={this.state.newName}\n              onChange={this.handleInputChange} />\n          </div>\n          <div>\n            Numero:\n            <input\n              name='newNumber'\n              value={this.state.newNumber}\n              onChange={this.handleInputChange} />\n          </div>\n          <div>\n            <button\n              type=\"submit\"\n              onClick={this.addContact}>lisÃ¤Ã¤</button>\n          </div>\n        </form>\n        <CatalogueDisplay\n          catalogue={this.state.contacts}\n          filterString={this.state.filterString}\n          removeContact={this.removeContact}/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}